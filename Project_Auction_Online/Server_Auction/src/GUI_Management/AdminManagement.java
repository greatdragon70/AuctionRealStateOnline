/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_Management;

import Server.ReceiveImage;
import Server.SendImage;
import Server.ServerSystem;
import Server.ThreadSocket;

import java.awt.HeadlessException;

import java.io.IOException;
import java.net.ServerSocket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author icydeath
 */
public class AdminManagement extends javax.swing.JFrame {

    private Connection conn;
    /**
     * Creates new form UserManagement
     */
    ServerSystem serverSystem;
//    ArrayList<UserManagement> threads = new ArrayList<UserManagement>();
    Thread server,serverSend,serverReceive;

    public AdminManagement() {
        initComponents();

        st(jTableUser, jTextFieldSearchUser);
        st(jTableCard, jTextFieldSearchCard);
        st(jTableProduct, jTextFieldSearchProduct);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableUser = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldSearchUser = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCard = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldSearchCard = new javax.swing.JTextField();
        jButtonAdd = new javax.swing.JButton();
        jButtonDeleteCard = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProduct = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButtonDeleteProduct = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldSearchProduct = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTableUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Statement"
            }
        ));
        jScrollPane1.setViewportView(jTableUser);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("User Management");

        jLabel6.setText("Search");

        jButtonConnect.setText("Open server");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldSearchUser, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConnect)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldSearchUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConnect))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("User Management", jPanel1);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Card Management");

        jTableCard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Series", "Code", "Price"
            }
        ));
        jScrollPane3.setViewportView(jTableCard);

        jLabel5.setText("Search");

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonDeleteCard.setText("Delete");
        jButtonDeleteCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel5)
                .addGap(27, 27, 27)
                .addComponent(jTextFieldSearchCard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDeleteCard)
                .addGap(47, 47, 47))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4)
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldSearchCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonDeleteCard))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Card Management", jPanel3);

        jTableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product", "Price", "Auction price", "Auctioneer", "Date", "Time"
            }
        ));
        jScrollPane2.setViewportView(jTableProduct);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Product Management");

        jButtonDeleteProduct.setText("Delete");
        jButtonDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteProductActionPerformed(evt);
            }
        });

        jLabel3.setText("Search");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(176, 176, 176))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDeleteProduct))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Product Management", jPanel2);

        jDesktopPane1.setLayer(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 488, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jDesktopPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
DefaultTableModel model;
Connection conn1;
        Connection conn2;
        Connection conn3;
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                    + "username=sa;password=sa");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {

            DefaultTableModel model = (DefaultTableModel) jTableCard.getModel();

            PreparedStatement ps = conn.prepareStatement("SELECT * FROM Recharge");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new String[]{rs.getString("series"), rs.getString("code"), rs.getString("money")});

            }
        } catch (Exception e) {
        }
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                ArrayList<String> array;
                boolean checkDelete = true;
                        try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    conn1 = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                            + "username=sa;password=sa");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                while (true) {

                    try {
                        Thread.sleep(2000);
                        array = new ArrayList();
                        DefaultTableModel model = (DefaultTableModel) jTableCard.getModel();
                        PreparedStatement ps = conn1.prepareStatement("SELECT * FROM Recharge");
                        ResultSet rs = ps.executeQuery();
                        while (rs.next()) {
                            array.add(rs.getString("code"));
                        }
                        for (int i = 0; i < model.getRowCount(); i++) {
                            for (int j = 0; j < array.size(); j++) {
                                if (model.getValueAt(i, 1).equals(array.get(j))) {
                                    checkDelete = false;
                                    break;
                                }
                            }
                            if (checkDelete) {
                                model.removeRow(i);
                            } else {
                                checkDelete = true;
                            }
                        }
                    } catch (Exception e) {
                    }

                }
            }
        }).start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                ArrayList<UserManagement> array;
                UserManagement user;
                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    conn2 = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                            + "username=sa;password=sa");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                while (true) {
                    try {
                        Thread.sleep(2000);
                        array = new ArrayList<UserManagement>();
                        DefaultTableModel model = (DefaultTableModel) jTableUser.getModel();
                        PreparedStatement ps = conn2.prepareStatement("SELECT * FROM person");
                        ResultSet rs = ps.executeQuery();
                        boolean checkAdd = true;

                        while (rs.next()) {
                            if (rs.getString("statement").equals("online")) {
                                user = new UserManagement(rs.getString("username"), rs.getString("statement"));
                                array.add(user);

                            }
                        }

                        for (int j = 0; j < array.size(); j++) {
                            for (int i = 0; i < model.getRowCount(); i++) {
                                if (array.get(j).getUsername().equals(model.getValueAt(i, 0))) {
                                    checkAdd = false;
                                    break;
                                }
                            }
                            if (checkAdd) {
                                model.addRow(new String[]{array.get(j).getUsername(), array.get(j).getStatement()});
                            } else {
                                checkAdd = true;
                            }
                        }

                        boolean checkConnect = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            for (int j = 0; j < array.size(); j++) {
                                if (model.getValueAt(i, 1).equals(array.get(j).getStatement())) {
                                    checkConnect = true;
                                    break;
                                }

                            }
                            if (!checkConnect) {
                                model.removeRow(i);
                            } else {
                                checkConnect = false;
                            }
                        }

                    } catch (Exception e) {
                    }
                }
            }
        }).start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                ArrayList<product> array;
                
                
                boolean checkDelete = true;
                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    conn3 = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                            + "username=sa;password=sa");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                while (true) {
                    try {
                        Thread.sleep(1000);
                        array = new ArrayList<product>();
                        
                        model = (DefaultTableModel) jTableProduct.getModel();

                        PreparedStatement ps = conn3.prepareStatement("SELECT * FROM product");
                        ResultSet rs = ps.executeQuery();
                        boolean checkAdd = true;
                        while (rs.next()) {
                            product pro = new product(rs.getString("id"), rs.getString("imageURL"), rs.getString("nameProduct"), rs.getString("infoProduct"), rs.getString("newMoney"), rs.getString("fullname"), rs.getString("username"), rs.getString("DateT"), rs.getString("clock"), rs.getString("price"));
                            array.add(pro);
                            
                            for (int i = 0; i < model.getRowCount(); i++) {
                                if (rs.getString("id").equals(model.getValueAt(i, 0))) {
                                    
                                    if(!rs.getString("clock").equals(model.getValueAt(i, 6))){
                                        model.setValueAt(rs.getString("clock"), i, 6);
                                    }
                                        model.setValueAt(rs.getString("fullname"), i, 4);
                                        model.setValueAt(rs.getString("newMoney"), i, 3);

                                    checkAdd = false;
                                }
                            }
                            if (checkAdd) {
                                model.addRow(new String[]{rs.getString("id"), rs.getString("nameProduct"), rs.getString("price"), rs.getString("newMoney"), rs.getString("fullname"), rs.getString("DateT"), rs.getString("clock")});
                            } else {
                                checkAdd = true;
                            }

                        }
                        for (int i = 0; i < model.getRowCount(); i++) {
                            for (int j = 0; j < array.size(); j++) {                                
                                if (model.getValueAt(i, 0).equals(array.get(i).getId())) {
                                    checkDelete = false;
                                    break;
                                }
                            }
                            if (checkDelete) {
                                model.removeRow(i);
                            } else {
                                checkDelete = true;
                            }
                        }
                        for(int i = 0; i< array.size();i++){
                            int a = Integer.parseInt(array.get(i).getClock())-1;
                            ps = conn3.prepareStatement("update product set clock = "+a+" where id = "+array.get(i).getId());
                            ps.executeUpdate();
                        }
                        for(int i = 0; i< array.size();i++){
                            int a = Integer.parseInt(array.get(i).getClock());
                            if(a<=0){
                                
                                for (int j = 0; j < model.getRowCount(); j++) {
                                                    
                                    if (model.getValueAt(j, 0).equals(array.get(i).getId())) {
                                        
                                         model.removeRow(j);
                                         ps = conn3.prepareStatement("DELETE FROM product where id = "+array.get(i).getId());
                                         ps.executeUpdate();
                                         if(Integer.parseInt(array.get(i).getPrice()) > Integer.parseInt(array.get(i).getMoney()) ){
                                             ps = conn3.prepareStatement("INSERT INTO productBought VALUES ("+array.get(i).getId()+",'"+array.get(i).getImageURL()+"','"+array.get(i).getNameProduct()+"','"+array.get(i).getInfoProduct()+"','"+array.get(i).getPrice()+"','"+array.get(i).getFullname()+"','"+array.get(i).getUsername()+"','"+array.get(i).getDateT()+"');"); 
                                             ps.executeUpdate();
                                             ps = conn3.prepareStatement("select * from UserManagement");
                                             ResultSet ls = ps.executeQuery();
                                             while(ls.next()){
                                                 if(ls.getString("username").equals(array.get(i).getUsername())){
                                                     int money = Integer.parseInt(ls.getString("moneyUser")) + Integer.parseInt(array.get(i).getPrice());
                                                     
                                                     ps = conn3.prepareStatement("UPDATE UserManagement SET moneyUser = "+money+" WHERE username = '"+array.get(i).getUsername()+"';");
                                                     ps.executeUpdate();
                                                 }else if(ls.getString("username").equals(array.get(i).getFullname())){
                                                     int money = Integer.parseInt(ls.getString("moneyUser")) - Integer.parseInt(array.get(i).getPrice());
                                                     int point = Integer.parseInt(ls.getString("point")) + Integer.parseInt(array.get(i).getPrice())/10;
                                                     int moneySpent = Integer.parseInt(ls.getString("moneySpent")) + Integer.parseInt(array.get(i).getPrice());
                                                     ps = conn3.prepareStatement("UPDATE UserManagement SET moneyUser = "+money+", point = "+point+", moneySpent = "+moneySpent+" WHERE username = '"+array.get(i).getFullname()+"';");
                                                     ps.executeUpdate();
                                                     
                                                 }
                                             }
                                         }
                                         
                                    }
                            
                            
                                }
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            }
        }).start();

    }//GEN-LAST:event_formWindowOpened
 Connection conn4;
    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        // TODO add your handling code here:
        if (checkDisconect) {
            notify();
        }
        JOptionPane.showMessageDialog(jDesktopPane1, "Open Server");
        server = new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    conn4 = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                            + "username=sa;password=sa");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                try {
                    ServerSocket ss = new ServerSocket(9999);// Tao cong 9999 de server lang nghe
                    
                    while (true)// Cho client ket noi
                    {
                        // Su dung multithread
                        // Khi co 1 client gui yeu cau toi thi se tao ra 1 thread phuc vu client do
                        ThreadSocket tmp = new ThreadSocket(ss.accept());
                        tmp.start();
                        //                new ThreadSocket(ss.accept()).start();
                        
                    }
                } catch (IOException e) {
                    System.out.println("Exception: " + e.getMessage());
                }
            }
        });
        server.start();
        serverSend = new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    conn4 = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                            + "username=sa;password=sa");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                try {
                    ServerSocket ss = new ServerSocket(6969);// Tao cong 9999 de server lang nghe
                    
                    while (true)// Cho client ket noi
                    {
                        // Su dung multithread
                        // Khi co 1 client gui yeu cau toi thi se tao ra 1 thread phuc vu client do
                        SendImage tmp = new SendImage(ss.accept());
                        tmp.start();
                        //                new ThreadSocket(ss.accept()).start();
                        
                    }
                } catch (IOException e) {
                    System.out.println("Exception: " + e.getMessage());
                }
            }
        });
        serverSend.start();
        serverReceive = new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    conn4 = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=Auction;"
                            + "username=sa;password=sa");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                try {
                    ServerSocket ss = new ServerSocket(9696);// Tao cong 9999 de server lang nghe
                    
                    while (true)// Cho client ket noi
                    {
                        // Su dung multithread
                        // Khi co 1 client gui yeu cau toi thi se tao ra 1 thread phuc vu client do
                        ReceiveImage tmp = new ReceiveImage(ss.accept());
                        tmp.start();
                        //                new ThreadSocket(ss.accept()).start();
                        
                    }
                } catch (IOException e) {
                    System.out.println("Exception: " + e.getMessage());
                }
            }
        });
        serverReceive.start();
    }//GEN-LAST:event_jButtonConnectActionPerformed
    addCard add;
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        if (add == null || add.isClosed()) {
            add = new addCard();
            add.addInternalFrameListener(new InternalFrameListener() {
                @Override
                public void internalFrameOpened(InternalFrameEvent ife) {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void internalFrameClosing(InternalFrameEvent ife) {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void internalFrameClosed(InternalFrameEvent ife) {
                    model = (DefaultTableModel) jTableCard.getModel();
                    model.addRow(new Object[]{add.getSeries(), add.getCode(), add.getPrice()});
                }

                @Override
                public void internalFrameIconified(InternalFrameEvent ife) {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void internalFrameDeiconified(InternalFrameEvent ife) {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void internalFrameActivated(InternalFrameEvent ife) {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void internalFrameDeactivated(InternalFrameEvent ife) {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            });
            jDesktopPane1.add(add);
            add.setVisible(true);

        }

    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDeleteCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCardActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTableCard.getModel();

        delete((String) model.getValueAt(jTableCard.getSelectedRow(), 1), "Recharge", "code");
        model.removeRow(jTableCard.getSelectedRow());
    }//GEN-LAST:event_jButtonDeleteCardActionPerformed

    private void jButtonDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteProductActionPerformed
        // TODO add your handling code here:

        model = (DefaultTableModel) jTableProduct.getModel();

        delete((String) model.getValueAt(jTableProduct.getSelectedRow(), 0), "Product", "id");
        model.removeRow(jTableProduct.getSelectedRow());
    }//GEN-LAST:event_jButtonDeleteProductActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // TODO add your handling code here:
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM person");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ps = conn.prepareStatement("UPDATE person SET statement = 'offline' where username = '" + rs.getString("username") + "';");
                ps.executeUpdate();
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing
    boolean checkDisconect = false;

    public void delete(String key, String table, String name) {
        try {
            PreparedStatement ps = conn.prepareStatement("DELETE FROM " + table + " WHERE " + name + " = '" + key + "'");
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(AdminManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void st(JTable searchTable, JTextField searchText) {

        TableRowSorter<TableModel> Sorter = new TableRowSorter<>(searchTable.getModel());
        searchTable.setRowSorter(Sorter);
        searchText.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = searchText.getText();
                if (text.length() == 0) {
                    Sorter.setRowFilter(null);
                } else {
                    Sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = searchText.getText();

                if (text.length() == 0) {
                    Sorter.setRowFilter(null);
                } else {
                    Sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDeleteCard;
    private javax.swing.JButton jButtonDeleteProduct;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableCard;
    private javax.swing.JTable jTableProduct;
    private javax.swing.JTable jTableUser;
    private javax.swing.JTextField jTextFieldSearchCard;
    private javax.swing.JTextField jTextFieldSearchProduct;
    private javax.swing.JTextField jTextFieldSearchUser;
    // End of variables declaration//GEN-END:variables
}
